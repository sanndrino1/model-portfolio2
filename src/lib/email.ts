import nodemailer from 'nodemailer'

// Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
export const createEmailTransporter = () => {
  // –ó–∞ development –∏–∑–ø–æ–ª–∑–≤–∞–º–µ Ethereal Email (test email service)
  // –ó–∞ production —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ —Ä–µ–∞–ª–µ–Ω email provider (Gmail, SendGrid, etc.)
  
  if (process.env.NODE_ENV === 'development') {
    // –ó–∞ development - Ethereal Email
    return nodemailer.createTransport({
      host: 'smtp.ethereal.email',
      port: 587,
      secure: false,
      auth: {
        user: process.env.EMAIL_USER || 'ethereal.user@ethereal.email',
        pass: process.env.EMAIL_PASS || 'ethereal.pass'
      }
    })
  }
  
  // –ó–∞ production - Gmail configuration
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS // Gmail App Password
    }
  })
}

// –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ 6-—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥
export const generate2FACode = (): string => {
  return Math.floor(100000 + Math.random() * 900000).toString()
}

// –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ 2FA –∫–æ–¥ –ø–æ email
export const send2FAEmail = async (email: string, code: string, userName?: string) => {
  const transporter = createEmailTransporter()
  
  const mailOptions = {
    from: process.env.EMAIL_FROM || '"Model Portfolio" <noreply@modelportfolio.com>',
    to: email,
    subject: '–ö–æ–¥ –∑–∞ –¥–≤—É—Ñ–∞–∫—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #b8860b; margin: 0;">Model Portfolio</h1>
          <p style="color: #6b6b6b; margin: 5px 0;">–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</p>
        </div>
        
        <div style="background: linear-gradient(135deg, #b8860b 0%, #7d8471 100%); padding: 30px; border-radius: 12px; text-align: center; margin-bottom: 30px;">
          <h2 style="color: white; margin: 0 0 10px 0;">–ö–æ–¥ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</h2>
          <div style="background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2); border-radius: 8px; padding: 20px; margin: 20px 0;">
            <span style="font-size: 32px; font-weight: bold; color: white; letter-spacing: 5px;">${code}</span>
          </div>
          <p style="color: rgba(255,255,255,0.9); margin: 0; font-size: 14px;">–¢–æ–∑–∏ –∫–æ–¥ –µ –≤–∞–ª–∏–¥–µ–Ω 10 –º–∏–Ω—É—Ç–∏</p>
        </div>
        
        <div style="background: #f8f7f5; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <p style="margin: 0 0 10px 0; color: #2c2c2c;">
            ${userName ? `–ó–¥—Ä–∞–≤–µ–π ${userName},` : '–ó–¥—Ä–∞–≤–µ–π—Ç–µ,'}
          </p>
          <p style="margin: 0 0 10px 0; color: #6b6b6b;">
            –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –∫–æ–¥–∞ –ø–æ-–≥–æ—Ä–µ –∑–∞ –¥–∞ –∑–∞–≤—ä—Ä—à–∏—Ç–µ –≤–ª–∏–∑–∞–Ω–µ—Ç–æ –≤—ä–≤ –≤–∞—à–∏—è Model Portfolio –∞–∫–∞—É–Ω—Ç.
          </p>
          <p style="margin: 0; color: #6b6b6b; font-size: 14px;">
            –ê–∫–æ –Ω–µ —Å—Ç–µ –∑–∞—è–≤—è–≤–∞–ª–∏ —Ç–æ–∑–∏ –∫–æ–¥, –º–æ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–∞–π—Ç–µ —Ç–æ–∑–∏ email.
          </p>
        </div>
        
        <div style="text-align: center; padding: 20px 0; border-top: 1px solid #e8e6e3;">
          <p style="color: #a8a39a; font-size: 12px; margin: 0;">
            ¬© ${new Date().getFullYear()} Model Portfolio. –í—Å–∏—á–∫–∏ –ø—Ä–∞–≤–∞ –∑–∞–ø–∞–∑–µ–Ω–∏.
          </p>
        </div>
      </div>
    `
  }
  
  try {
    const info = await transporter.sendMail(mailOptions)
    
    // –ó–∞ development –ø–æ–∫–∞–∑–≤–∞–º–µ preview URL
    if (process.env.NODE_ENV === 'development') {
      console.log('üìß 2FA Email sent successfully!')
      console.log('üìß Preview URL:', nodemailer.getTestMessageUrl(info))
    }
    
    return { success: true, messageId: info.messageId }
  } catch (error) {
    console.error('‚ùå Error sending 2FA email:', error)
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
  }
}

// –í–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –Ω–∞ email —Ñ–æ—Ä–º–∞—Ç
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

// –•–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–¥ –∑–∞ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
export const hashCode = async (code: string): Promise<string> => {
  const bcrypt = await import('bcryptjs')
  return bcrypt.hash(code, 12)
}

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –∫–æ–¥
export const verifyCode = async (code: string, hashedCode: string): Promise<boolean> => {
  const bcrypt = await import('bcryptjs')
  return bcrypt.compare(code, hashedCode)
}

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –∏–∑—Ç–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–¥ (10 –º–∏–Ω—É—Ç–∏)
export const getCodeExpiration = (): Date => {
  return new Date(Date.now() + 10 * 60 * 1000) // 10 minutes
}